#!/usr/bin/python
# Copyright (c) 2010 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#
#
# This script will issue commands to the specified management node to
# simulate the same functionality that the GUI can provide

import inspect, optparse, sys, time

from rpath_repeater.client import RepeaterClient

def nonPrivate(s):
    if '_' in s:
        if s.index('_') == 0:
            return False
           
    return True

            
def getArgs(func, availArgs):
    idx = RepeaterClient.__dict__.items()
    fargs = None
    rargs = []
    
    for name, attr in idx:
        if inspect.isfunction(attr) and attr.func_name == func:
            fargs = inspect.getargspec(attr)[0][1:]
    
    for a in fargs:
        rargs.append(availArgs[a])
        
    return tuple(rargs)
    
class ManagementNodeControl(object):

    def __init__(self, options, args):
        self.options = options
        self.args = args
        self.client = RepeaterClient()
        
    def getCommands(self):
        idx = self.client.__dict__.items()
        
        for name, attr in idx:
            if inspect.isfunction(attr) and nonPrivate(name):
                print "\t" + name
    
    def prettyprint(self, results):
        if isinstance(results, tuple):
            uuid, job = results
            if not self.options.noWait:
                while True:
                    job = self.getJob(uuid)
                    if job.status.completed:
                        break
                    else:
                        time.sleep(5)
    
                print job.status.text
            print uuid
        else:
            print results
    
    def runCommand(self):
        command = self.options.command
        host = self.options.host
        node = self.options.node
        port = self.options.port
        
        response = None
        
        args = dict(host=host, node=node, port=port)
        
        if hasattr(cli, command):
            response = getattr(self.client, command)(*getArgs(command, args))
        else:
            print >> sys.stderr, "Command: %s does not exist" % command
            sys.exit(1)
            
        self.prettyprint(response)

if __name__ == '__main__':
    parser = optparse.OptionParser(version = '%prog 0.1')
    parser.add_option("--command","-c", dest = "command", 
                      action = "store", help = "specify the command to run on the management node")
    parser.add_option("--node","-n", dest = "node", default = 'localhost',
                      action = "store", help = "specify the node")
    parser.add_option("--host","-m", dest = "host", 
                      action = "store", help = "specify the host to manage")
    parser.add_option("--port","-p", dest = "port", default = None,
                      action = "store", help = "specify the port that the managed system is listening")
    parser.add_option("--no-wait","-w", dest = "noWait", default = False,
                      action = "store_true", help = "return immediately with the job id")
    parser.add_option("--list","-l", dest = "listCommands", default = False,
                      action = "store_true", help = "list the commands available")
    (options, args) = parser.parse_args()
    
   # if len(args) < 1 and not options.listCommands:
   #     print >> sys.stderr, "management_node: a management node command was expected"
   #     sys.exit(1)
        
    mgmtNodeControl = ManagementNodeControl(options, args)
    
    if options.listCommands:
        mgmtNodeControl.getCommands()
        sys.exit(0)
        
    if options.command:
        mgmtNodeControl.runCommand()
        
     
