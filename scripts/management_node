#!/usr/bin/python
#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
This script will issue commands to the specified management node to
simulate the same functionality that the GUI can provide
"""


import inspect, optparse, sys, time

from rmake3.core.types import RmakeJob
from rmake3.lib import uuid as RmakeUuid

from rpath_repeater.client import RepeaterClient

def nonPrivate(s):
    if '_' in s:
        if s.index('_') == 0:
            return False
           
    return True

            
def getArgs(func, availArgs):
    idx = RepeaterClient.__dict__.items()
    fargs = None
    rargs = []
    
    for name, attr in idx:
        if inspect.isfunction(attr) and attr.func_name == func:
            fargs = inspect.getargspec(attr)[0][1:]
    
    for a in fargs:
	if a in availArgs:
            rargs.append(availArgs[a])
	else:
	    print >> sys.stderr, "Missing argument %s" % a
        
    return tuple(rargs)
    
class ManagementNodeControl(object):

    def __init__(self, options, args):
        self.options = options
        self.args = args
	self.client = RepeaterClient()
        
    def getCommands(self):
        idx = RepeaterClient.__dict__.items()
        
        for name, attr in idx:
            if inspect.isfunction(attr) and nonPrivate(name):
                print "\t" + name
    
    def prettyprint(self, results):
        if isinstance(results, tuple):
            uuid, job = results
            if not self.options.noWait:
                while True:
                   job = self.client.getJob(uuid)

                   if job.status.completed or job.status.failed:
                       break
                   else:
                       time.sleep(5)
    
	    	print job.status.code
            	print job.status.text
		return

	    print uuid
	if isinstance(results, RmakeJob):
	    print results.status.code
	    print results.status.text
        else:
            print results
    
    def runCommand(self):
        cli = RepeaterClient()
        
        command = self.options.command
        host = self.options.host
        zone = self.options.zone
        port = self.options.port
	uuid = None

	if self.options.UUID:
		uuid = RmakeUuid.UUID(self.options.UUID)
        
        response = None
        
        args = dict(host=host, zone=zone, port=port, uuid=uuid)
        
        if hasattr(cli, command):
            response = getattr(cli, command)(*getArgs(command, args))
        else:
            print >> sys.stderr, "Command: %s does not exist" % command
            sys.exit(1)
            
        self.prettyprint(response)

if __name__ == '__main__':
    parser = optparse.OptionParser(version = '%prog 0.1')
    parser.add_option("--command","-c", dest = "command", 
                      action = "store", help = "specify the command to run on the management node")
    parser.add_option("--zone","-z", dest = "zone", default = 'localhost',
                      action = "store", help = "specify the zone")
    parser.add_option("--host","-m", dest = "host", 
                      action = "store", help = "specify the host to manage")
    parser.add_option("--job","-j", dest = "UUID", default = None,
                      action = "store", help = "specify the job that you want inspect")
    parser.add_option("--port","-p", dest = "port", default = None,
                      action = "store", help = "specify the port that the managed system is listening")
    parser.add_option("--no-wait", dest = "noWait", default = False,
                      action = "store_true", help = "return immediately with the job id")
    parser.add_option("--list","-l", dest = "listCommands", default = False,
                      action = "store_true", help = "list the commands available")
    (options, args) = parser.parse_args()
    
   # if len(args) < 1 and not options.listCommands:
   #     print >> sys.stderr, "management_node: a management node command was expected"
   #     sys.exit(1)
        
    mgmtNodeControl = ManagementNodeControl(options, args)
    
    if options.listCommands:
        mgmtNodeControl.getCommands()
        sys.exit(0)
        
    if options.command:
        mgmtNodeControl.runCommand()
